import type { NextPage } from "next";
import Head from "next/head";
import { useMemo, useState } from "react";
import Header from "../components/Header/Header";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
    const [search, setSearch] = useState("");

    const { isLoading, isError, error, data } = trpc.useQuery(["clubs.getAll"]);
    const {
        isLoading: isLoadingFixtures,
        isError: isErrorFixtures,
        error: errorFixtures,
        data: dataFixtures,
    } = trpc.useQuery(["fixtures.getAll"]);

    const seedAllMutation = trpc.useMutation(["seeder.all"]);
    const seedClubsMutation = trpc.useMutation(["seeder.clubs"]);
    const seedDeleteAllMutation = trpc.useMutation(["seeder.deleteAll"]);
    const seedScrapePremierLeagueMutation = trpc.useMutation([
        "seeder.scrapePremierLeague",
    ]);

    const filteredFixtures = useMemo(() => {
        if (!dataFixtures) {
            return [];
        }

        return dataFixtures.filter(
            (fixture) =>
                new RegExp(search, "i").test(fixture.home.name) ||
                new RegExp(search, "i").test(fixture.away.name)
        );
    }, [dataFixtures, search]);
    console.log(filteredFixtures);

    if (isLoading || isLoadingFixtures) {
        return <div>Loading...</div>;
    }

    if (isError || isErrorFixtures) {
        return (
            <div>Error: {isError ? error.message : errorFixtures!.message}</div>
        );
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <div className="bg-blue-100 mb-16">
                <button
                    className="block"
                    onClick={() => seedAllMutation.mutate()}
                >
                    Seed All
                </button>
                <button
                    className="block"
                    onClick={() => seedClubsMutation.mutate()}
                >
                    Seed clubs
                </button>
                <button
                    className="block"
                    onClick={() => seedDeleteAllMutation.mutate()}
                >
                    Empty Database
                </button>
                <button
                    className="block"
                    onClick={() => seedScrapePremierLeagueMutation.mutate()}
                >
                    Scrape Premier League
                </button>
            </div>
            <ul>
                {data?.map((club) => (
                    <li key={club.id}>
                        {club.name}{" "}
                        <span className="font-bold">{club.abbr}</span>
                    </li>
                ))}
            </ul>
            <input
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                type="text"
            />
            <h1>Results {filteredFixtures.length}</h1>
            <ul>
                {filteredFixtures.map((fixture) => (
                    <li key={fixture.id}>
                        <span
                            className={`${
                                isMatch(search, fixture.home.name)
                                    ? "font-bold"
                                    : ""
                            }`}
                        >
                            {fixture.home.name}
                        </span>{" "}
                        vs{" "}
                        <span
                            className={`${
                                isMatch(search, fixture.away.name)
                                    ? "font-bold"
                                    : ""
                            }`}
                        >
                            {fixture.away.name}
                        </span>
                        {fixture.score && (
                            <div>
                                {fixture.score.home}:{fixture.score.away}
                            </div>
                        )}
                    </li>
                ))}
            </ul>
        </>
    );
};

const isMatch = (keyword: string, value: string) => {
    return new RegExp(keyword, "i").test(value);
};

export default Home;
